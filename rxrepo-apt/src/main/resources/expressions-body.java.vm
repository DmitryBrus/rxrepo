#parse("macros.vm")

    public static final Expressions<$targetClass.simpleName()##
        #if (!$sourceClass.typeParams().isEmpty())##
            <#foreach ($tp in $sourceClass.typeParams())?#if ($foreach.hasNext), #end#end>##
        #end##
        #foreach ($tp in $sourceClass.typeParams()), ?#end> ${dollar} = new Expressions<>();
    public static #annotateNonPropertyMethod($context) #typeParamsDeclaration($sourceClass) Expressions<$targetClass.simpleName()#typeParams($sourceClass)#foreach ($tp in $sourceClass.typeParams()), $tp.typeName()#end> ${dollar}() {
#if ($sourceClass.typeParams().isEmpty())
        return ${dollar};
#else
        return (Expressions<$targetClass.simpleName()#typeParams($sourceClass)#foreach ($tp in $sourceClass.typeParams()), $tp.typeName()#end>)(Expressions)${dollar};
#end
    }

    public static class Expressions<__S#foreach ($tp in $sourceClass.typeParams()), $tp.fullDeclaration()#end> implements $[com.slimgears.rxrepo.expressions.DelegateExpression]<__S, $targetClass.simpleName()#typeParams($sourceClass)> {
        private final $[com.slimgears.rxrepo.expressions.ObjectExpression]<__S, $targetClass.simpleName()#typeParams($sourceClass)> self;
        private final Meta#typeParams($sourceClass) meta = #if ($sourceClass.typeParams().isEmpty())new Meta()#{else}new Meta<>()#end;

        Expressions() {
            this($[com.slimgears.rxrepo.expressions.ObjectExpression].objectArg(new TypeToken<$targetClass.simpleName()#typeParams($sourceClass)>(){}));
        }

        Expressions($[com.slimgears.rxrepo.expressions.ObjectExpression]<__S, $targetClass.simpleName()#typeParams($sourceClass)> self) {
            this.self = self;
#foreach ($p in $properties)
            this.$p.name() = ##
    #if ($expressionUtils.hasOwnExpressions($p))##
            $[$p.type().erasureName()].ReferencePropertyExpression.create(##
    #elseif ($p.isStringProperty())##
            $[com.slimgears.rxrepo.expressions.PropertyExpression].ofString(##
    #elseif ($p.isNumericProperty())##
            $[com.slimgears.rxrepo.expressions.PropertyExpression].ofNumeric(##
    #elseif ($p.isComparableProperty())##
            $[com.slimgears.rxrepo.expressions.PropertyExpression].ofComparable(##
    #elseif ($p.isBooleanProperty())##
            $[com.slimgears.rxrepo.expressions.PropertyExpression].ofBoolean(##
    #elseif ($p.isCollectionProperty())##
            $[com.slimgears.rxrepo.expressions.PropertyExpression].ofCollection(##
    #else##
            $[com.slimgears.rxrepo.expressions.PropertyExpression].ofObject(##
    #end##
            self, meta.${p.name()});##

#end
        }

        @Override
        public Type type() {
            return this.self.type();
        }

        @Override
        public ObjectExpression<__S, $targetClass.simpleName()#typeParams($sourceClass)> delegate() {
            return this.self;
        }

        @Override
        public $[com.google.common.reflect.TypeToken]<$targetClass.simpleName()#typeParams($sourceClass)> objectType() {
            return this.self.objectType();
        }

        public static #typeParamsDeclaration($sourceClass) Expressions<$targetClass.simpleName()#typeParams($sourceClass)#foreach ($tp in $sourceClass.typeParams()), $tp.typeName()#end> create() {
            return new Expressions<>(ObjectExpression.arg(new $[com.google.common.reflect.TypeToken]<$targetClass.simpleName()#typeParams($sourceClass)>(){}));
        }

#foreach ($p in $properties)
        public final ##
    #if ($expressionUtils.hasOwnExpressions($p))##
        $[$p.type().erasureName()].ReferencePropertyExpression<__S, $targetClass.simpleName()#typeParams($sourceClass)#foreach ($tp in $p.type().typeParams()), $tp.typeName()#end>##
    #elseif ($p.isStringProperty())##
        $[com.slimgears.rxrepo.expressions.internal.StringPropertyExpression]<__S, $targetClass.simpleName()#typeParams($sourceClass)>##
    #elseif ($p.isNumericProperty())##
        $[com.slimgears.rxrepo.expressions.internal.NumericPropertyExpression]<__S, $targetClass.simpleName()#typeParams($sourceClass), $[$p.type().asBoxed()]>##
    #elseif ($p.isComparableProperty())##
        $[com.slimgears.rxrepo.expressions.internal.ComparablePropertyExpression]<__S, $targetClass.simpleName()#typeParams($sourceClass), $[$p.type().asBoxed()]>##
    #elseif ($p.isBooleanProperty())##
        $[com.slimgears.rxrepo.expressions.internal.BooleanPropertyExpression]<__S, $targetClass.simpleName()#typeParams($sourceClass)>##
    #elseif ($p.isCollectionProperty())##
        $[com.slimgears.rxrepo.expressions.internal.CollectionPropertyExpression]<__S, $targetClass.simpleName()#typeParams($sourceClass), $[$p.collectionElementType()], $[$p.type()]>##
    #else##
        $[com.slimgears.rxrepo.expressions.internal.ObjectPropertyExpression]<__S, $targetClass.simpleName()#typeParams($sourceClass), $[$p.type().asBoxed()]>##
    #end ##
        $p.name();##

#end
    }

    public static class ReferencePropertyExpression<__S, __T#foreach ($tp in $sourceClass.typeParams()), $tp.fullDeclaration()#end> extends Expressions<__S#foreach ($tp in $sourceClass.typeParams()), $tp.typeName()#end> implements $[com.slimgears.rxrepo.expressions.PropertyExpression]<__S, __T, $targetClass.simpleName()#typeParams($sourceClass)> {
        private final $[com.slimgears.rxrepo.expressions.ObjectExpression]<__S, __T> target;
        private final $[com.slimgears.util.autovalue.annotations.PropertyMeta]<__T, $targetClass.simpleName()#typeParams($sourceClass)> property;

        private ReferencePropertyExpression(ObjectExpression<__S, __T> target, PropertyMeta<__T, $targetClass.simpleName()#typeParams($sourceClass)> property) {
            super($[com.slimgears.rxrepo.expressions.PropertyExpression].ofObject(target, property));
            this.target = target;
            this.property = property;
        }

        public static <__S, __T#foreach ($tp in $sourceClass.typeParams()), $tp.fullDeclaration()#end> ReferencePropertyExpression<__S, __T#foreach ($tp in $sourceClass.typeParams()), $tp.typeName()#end> create(ObjectExpression<__S, __T> target, PropertyMeta<__T, $targetClass.simpleName()#typeParams($sourceClass)> property) {
            return new ReferencePropertyExpression<>(target, property);
        }

        @Override
        public ObjectExpression<__S, __T> target() {
            return target;
        }

        @Override
        public PropertyMeta<__T, $targetClass.simpleName()#typeParams($sourceClass)> property() {
            return property;
        }

        @Override
        public Type type() {
            return Type.Property;
        }

        @Override
        public $[com.google.common.reflect.TypeToken]<$targetClass.simpleName()#typeParams($sourceClass)> objectType() {
            return property.type();
        }
    }
