#parse("macros.vm")

#macro (filterType $p)##
    #if ($filterUtils.hasOwnFilter($p))##
            $[$p.type().erasureName()].Filter#typeParams($p.type())##
    #elseif ($p.isStringProperty())##
            $[com.slimgears.rxrepo.filters.StringFilter]##
    #elseif ($p.isNumericProperty() || $p.isComparableProperty())##
            $[com.slimgears.rxrepo.filters.ComparableFilter]<$[$p.type().asBoxed()]>##
    #elseif ($p.isBooleanProperty())##
            $[com.slimgears.rxrepo.filters.StringFilter]##
    #elseif ($p.isCollectionProperty())##
            $[com.slimgears.rxrepo.filters.CollectionFilter]<$[$p.collectionElementType()]>##
    #else##
            $[com.slimgears.rxrepo.filters.ValueFilter]<$[$p.type().asBoxed()]>##
    #end##
#end##

    @$[com.google.auto.value.AutoValue]
    public static abstract class Filter#typeParamsDeclaration($sourceClass) implements $[com.slimgears.rxrepo.filters.ValueFilterPrototype]<${targetClass.simpleName()}#typeParams($sourceClass)>##
#if ($isSearchable)##
, $[com.slimgears.rxrepo.filters.SearchableFilter]##
#end {
#foreach ($p in $filterableProperties)
        @$[javax.annotation.Nullable] @$[com.fasterxml.jackson.annotation.JsonProperty]("$p.name()") public abstract #filterType($p) ${p.name()}();
#end
#if ($isSearchable)
        @Override @$[javax.annotation.Nullable] @$[com.fasterxml.jackson.annotation.JsonProperty]("searchText") public abstract String searchText();
#end
        @Override
        public <__S> $[java.util.Optional]<$[com.slimgears.rxrepo.expressions.BooleanExpression]<__S>> toExpression($[com.slimgears.rxrepo.expressions.ObjectExpression]<__S, $targetClass.simpleName()#typeParams($sourceClass)> arg) {
            Expressions<__S#foreach ($tp in $sourceClass.typeParams()), $tp.name()#end> self = new Expressions<>(arg);
            return $[com.slimgears.rxrepo.filters.Filters].combineExpressions(
#if ($isSearchable)
                    $[com.slimgears.rxrepo.filters.Filters].fromTextFilter(this, self),
#end##
#foreach ($p in $filterableProperties)
                    $[java.util.Optional].ofNullable(${p.name()}()).flatMap(f -> f.toExpression(self.${p.name()})),
#end
                    ValueFilterPrototype.super.toExpression(arg)
            );
        }

        public static #typeParamsDeclaration($sourceClass) Builder#typeParams($sourceClass) builder() {
            return new AutoValue_${targetClass.simpleName()}_Filter.Builder##
#if ($sourceClass.hasTypeParams())<>#end();
        }

        @$[com.fasterxml.jackson.annotation.JsonCreator]
        public static #typeParamsDeclaration($sourceClass) Filter#typeParams($sourceClass) create(
#if ($isSearchable)            @$[javax.annotation.Nullable] @$[com.fasterxml.jackson.annotation.JsonProperty]("searchText") String searchText,#end
#foreach ($p in $filterableProperties)
            @$[javax.annotation.Nullable] @$[com.fasterxml.jackson.annotation.JsonProperty]("$p.name()") #filterType($p) ${p.name()},
#end
            @$[javax.annotation.Nullable] @$[com.fasterxml.jackson.annotation.JsonProperty]("equalsTo") $targetClass.simpleName() equalsTo,
            @$[javax.annotation.Nullable] @$[com.fasterxml.jackson.annotation.JsonProperty]("notEqualsTo") $targetClass.simpleName() notEqualsTo,
            @$[javax.annotation.Nullable] @$[com.fasterxml.jackson.annotation.JsonProperty]("equalsToAny") $[com.google.common.collect.ImmutableList]<$targetClass.simpleName()> equalsToAny,
            @$[javax.annotation.Nullable] @$[com.fasterxml.jackson.annotation.JsonProperty]("isNull") Boolean isNull) {
            return Filter.#typeParams($sourceClass)builder()
#if ($isSearchable)
                    .searchText(searchText)
#end
#foreach ($p in $filterableProperties)
                    .${p.name()}($p.name())
#end
                    .equalsTo(equalsTo)
                    .notEqualsTo(notEqualsTo)
                    .equalsToAny(equalsToAny)
                    .isNull(isNull)
                    .build();
        }

        @AutoValue.Builder
        public interface Builder#typeParamsDeclaration($sourceClass) extends $[com.slimgears.rxrepo.filters.ValueFilterPrototypeBuilder]<$targetClass.simpleName()#typeParams($sourceClass), Builder#typeParams($sourceClass)> {
#foreach ($p in $filterableProperties)
            Builder#typeParams($sourceClass) ${p.name()}(#filterType($p) ${p.name()});
#end
#if ($isSearchable)
            Builder#typeParams($sourceClass) searchText(String searchText);
#end
            Filter#typeParams($sourceClass) build();
        }
    }
