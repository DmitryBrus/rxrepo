#parse("macros.vm")

#macro (filterType $p)##
    #if ($p.isReferenceProperty())##
            $[$p.type().erasureName()].Filter#typeParams($p.type())##
    #elseif ($p.isStringProperty())##
            $[com.slimgears.rxrepo.filters.StringFilter]##
    #elseif ($p.isNumericProperty() || $p.isComparableProperty())##
            $[com.slimgears.rxrepo.filters.ComparableFilter]<$[$p.type().asBoxed()]>##
    #elseif ($p.isBooleanProperty() )##
            $[com.slimgears.rxrepo.filters.StringFilter]##
    #else##
            $[com.slimgears.rxrepo.filters.ValueFilter]<$[$p.type().asBoxed()]>##
    #end##
#end##

    @$[com.google.auto.value.AutoValue]
    public static abstract class Filter#typeParamsDeclaration($sourceClass) implements com.slimgears.rxrepo.filters.Filter<${targetClass.simpleName()}#typeParams($sourceClass)>, $[com.slimgears.rxrepo.filters.TextFilter] {
#foreach ($p in $filterableProperties)
        @$[javax.annotation.Nullable] public abstract #filterType($p) ${p.name()}();
#end
        @Override @$[javax.annotation.Nullable] public abstract String searchText();

        @Override
        public <__S> $[java.util.Optional]<$[com.slimgears.rxrepo.expressions.BooleanExpression]<__S>> toExpression($[com.slimgears.rxrepo.expressions.ObjectExpression]<__S, $targetClass.simpleName()#typeParams($sourceClass)> arg) {
            Expressions<__S#foreach ($tp in $sourceClass.typeParams()), $tp.name()#end> self = new Expressions<>(arg);
            return $[com.slimgears.rxrepo.filters.Filters].combineExpressions(
                    $[com.slimgears.rxrepo.filters.Filters].fromTextFilter(this, arg)##
#foreach ($p in $filterableProperties)##
,
                    $[java.util.Optional].ofNullable(${p.name()}()).flatMap(f -> f.toExpression(self.${p.name()}))
#end##
            );
        }

        public static #typeParamsDeclaration($sourceClass) Builder#typeParams($sourceClass) builder() {
            return new AutoValue_${targetClass.simpleName()}_Filter.Builder##
#if ($sourceClass.hasTypeParams())<>#end();
        }

        public static #typeParamsDeclaration($sourceClass) Filter#typeParams($sourceClass) create(
#foreach ($p in $filterableProperties)
            @$[javax.annotation.Nullable] #filterType($p) ${p.name()}##
    #if ($foreach.hasNext),##

##
    #end##
#end##
        ) {
            return Filter.#typeParams($sourceClass)builder()
#foreach ($p in $filterableProperties)
                    .${p.name()}($p.name())
#end
                    .build();
        }

        @AutoValue.Builder
        public interface Builder#typeParamsDeclaration($sourceClass) {
#foreach ($p in $filterableProperties)
            Builder#typeParams($sourceClass) ${p.name()}(#filterType($p) ${p.name()});
#end
            Builder#typeParams($sourceClass) searchText(String searchText);
            Filter#typeParams($sourceClass) build();
        }
    }
